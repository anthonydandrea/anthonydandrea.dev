#!/usr/bin/env python3
import os
import shutil
from bs4 import BeautifulSoup
import re

# Get the absolute path to the current script
script_dir = os.path.dirname(os.path.abspath(__file__))

# Set the current working directory to be one step above the script directory
os.chdir(os.path.dirname(script_dir))

# Print the current working directory to verify
print("Current working directory:", os.getcwd())

# Define directories
source_dir = "content"
destination_dir = "public"
redirect_template_file = "redirect.html"

def post_links_open_new_tab(path):
    with open(path, "r", encoding="utf-8") as f:
        html_file = BeautifulSoup(f, "html.parser")

    # Find and modify matching <a> tags
    for a in html_file.find_all("a", href=re.compile(r"^/posts/")):
        a["target"] = "_blank"

    # Write back the modified HTML
    with open(path, "w", encoding="utf-8") as f:
        f.write(str(html_file))

posts_page_path = os.path.join(destination_dir, "posts/index.html")
landing_page_path = os.path.join(destination_dir, "index.html")

post_links_open_new_tab(posts_page_path)
post_links_open_new_tab(landing_page_path)

# Walk through the "content" directory
for root, _, files in os.walk(source_dir):
    for file in files:
        # Construct full source path
        source_path = os.path.join(root, file)
        
        # Read the redirect URL from the source file
        redirect_url = None
        with open(source_path, "r") as f:
            for line in f:
                if line.startswith("redirectUrl:"):
                    redirect_url = line.split("redirectUrl:")[1].strip()
                    break
        
        if redirect_url:
            # Strip the "content/" prefix from the path
            relative_path = os.path.relpath(source_path, source_dir)
            
            # Construct the destination path
            destination_path = os.path.join(destination_dir, os.path.splitext(relative_path)[0], "index.html")
            
            # Create destination directories if they don't exist
            os.makedirs(os.path.dirname(destination_path), exist_ok=True)
            
            # Read the template and replace REDIRECT_URL with the extracted URL
            with open(redirect_template_file, "r") as template:
                content = template.read().replace("REDIRECT_URL", redirect_url)
            
            # Write the modified content to the destination file
            with open(destination_path, "w") as output_file:
                output_file.write(content)
            
            print(f"Processed {source_path} -> {destination_path}")

